Pseudocode for FishingActivity

FishingActivity needs a client subOcean, which will be a nested class
client subOcean will before keeping track of min and max 
populations for each species

FishingActivity will need to send and recieve objects from the server, so its
constructor will take an ObjectOutputStream and an ObjectInputStream.
It will also need a gamePane, which the simpleFishingPane is nested in,
and a player, so that it can add to the player's ice chest when a 
SeaCreature is caught.  All these will be taken in in the constructor.
(Later it may also use the player's equipment/boat(s))
The final thing the constructor does is updateSeaCreaturesOnScreen

The UpdateSeaCreaturesOnScreen calls getUpdateSeaCreaturesPacketFromServer,
which returns a SeaCreaturesPacket
Two methods then add these creatures to the screen, one for the fish, and 
the other for the shellfish (There might be a way to do it with one method,
but we haven't figured that out yet, so basically at this point for every fish 
method, there is a shellfish method)

Assume for now that when a fish method is mentioned,
there is a very similar method for a shellfish

getUpdateSeaCreaturesPacketFromServer works as follows: it creates a
ClientSubOceanSeaCreatureStatePacket, that is initialized with all the info
of clientSubOcean.  (I tried making clientSubocean it's own serializable class
and sending an instance of it, but for some reason that did not work)
Ocean then determines (with its own non-arbitrary method), how many 
SeaCreatures to give back.  The number can be as small as 0, and as great as
however many SeaCreatures would be necessary to fill the clientSubOcean.
It works based on the percentage filled the ocean is compared with the
clientSubOcean.  For more on that, see Ocean.
getUpdateSeaCreaturesPacketFromServer then returns whatever SeaCreaturesPacket
Ocean sends back.  This isn't currently in a thread, but is set-up to be,
and probably should be so that it doesn't hog the program control if the 
SeaCreaturesPacket isn't sent immediately.  We can fix that before the final.

UpdateSeaCreaturesOnScreen adds the fish by calling addFishPacketToScreen,
where there is a topOffset (how close to the top a fish can be), a bottom offset,
(how close to the bottom a fish can be), a color, (This probably will be gotten
rid of once each fish has its own graphic; now its just to distinguish each
species as they are all just circles), and of course the fish arraylist that 
needs to be added to the screen.  UpdateSeaCreaturesOnScreen also adds
the arraylists' sizes to the apropriate populations in clientSubOcean

addFishPacketToScreen works simply by doing a for loop for the whole array,
and as each index is gotten too, adding that fish to the screen with,
addFishToScreen

addFishToScreen takes similar paremeters as addFishPacketToScreen, except it
takes a fish instead of an arraylist of fish
Later on, it will take into account depths with the offsets (or directly with
attributes of fish) but for now, the fish can be put anywhere on the 
SimpleFishingPane, with a random number (generated by NumberUtitlities.getRandomDouble)
between the 0+topOffset (+150 to make room for the descriptive label) and the
height-bottomOffset, and another random number between 0 and the width
The fish's setBodyByWeight method and setBodyByColor method are called
to give the fish a circle of a radius of pixels equal to the fish's weight
(The fishes weight was assigned to it by Ocean when ocean instantiated it).
The color is temporary as it will be replaced by a graphic, so it is just 
passed in.

When the fish is added to SimpleFishingPane, it is given an event handler 
for when it is clicked on.
This event handler is a ExtractFishAction, which takes in its constructor a fish

The ExtractFishAction takes in its constructor a Fish, so that the Fish can
be put in the player's ice chest when its caught.  Besides that, all it does is
remove the fish's body from the children of the pane, and, based on the fish's
species, decrement the appropriate population in clientSubOcean to
decrement

As said before, all the fish methods work almost identically as the 
shellfish methods 
